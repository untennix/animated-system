# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-12-07 23:13+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: TH
#: gitglossary.7:10
#, no-wrap
msgid "GITGLOSSARY"
msgstr ""

#. type: TH
#: gitglossary.7:10
#, no-wrap
msgid "11/29/2021"
msgstr ""

#. type: TH
#: gitglossary.7:10
#, no-wrap
msgid "Git 2\\&.34\\&.1"
msgstr ""

#. type: TH
#: gitglossary.7:10
#, no-wrap
msgid "Git Manual"
msgstr ""

#.  -----------------------------------------------------------------
#.  * MAIN CONTENT STARTS HERE *
#.  -----------------------------------------------------------------
#. type: SH
#: gitglossary.7:30
#, no-wrap
msgid "NAME"
msgstr ""

#. type: Plain text
#: gitglossary.7:32
msgid "gitglossary - A Git Glossary"
msgstr ""

#. type: SH
#: gitglossary.7:32
#, no-wrap
msgid "SYNOPSIS"
msgstr ""

#. type: Plain text
#: gitglossary.7:35
msgid "*"
msgstr ""

#. type: SH
#: gitglossary.7:35
#, no-wrap
msgid "DESCRIPTION"
msgstr ""

#. type: Plain text
#: gitglossary.7:38
msgid "alternate object database"
msgstr ""

#. type: Plain text
#: gitglossary.7:44
msgid ""
"Via the alternates mechanism, a repository can inherit part of its object "
"database from another object database, which is called an \"alternate\"\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:47
msgid "bare repository"
msgstr ""

#. type: Plain text
#: gitglossary.7:57
msgid ""
"A bare repository is normally an appropriately named directory with a "
"B<\\&.git> suffix that does not have a locally checked-out copy of any of "
"the files under revision control\\&. That is, all of the Git administrative "
"and control files that would normally be present in the hidden B<\\&.git> "
"sub-directory are directly present in the B<repository\\&.git> directory "
"instead, and no other files are present and checked out\\&. Usually "
"publishers of public repositories make bare repositories available\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:60
msgid "blob object"
msgstr ""

#. type: Plain text
#: gitglossary.7:63
msgid "Untyped object, e\\&.g\\&. the contents of a file\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:66
msgid "branch"
msgstr ""

#. type: Plain text
#: gitglossary.7:77
msgid ""
"A \"branch\" is a line of development\\&. The most recent commit on a branch "
"is referred to as the tip of that branch\\&. The tip of the branch is "
"referenced by a branch head, which moves forward as additional development "
"is done on the branch\\&. A single Git repository can track an arbitrary "
"number of branches, but your working tree is associated with just one of "
"them (the \"current\" or \"checked out\" branch), and HEAD points to that "
"branch\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:80
msgid "cache"
msgstr ""

#. type: Plain text
#: gitglossary.7:83
msgid "Obsolete for: index\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:86
msgid "chain"
msgstr ""

#. type: Plain text
#: gitglossary.7:93
msgid ""
"A list of objects, where each object in the list contains a reference to its "
"successor (for example, the successor of a commit could be one of its "
"parents)\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:96
msgid "changeset"
msgstr ""

#. type: Plain text
#: gitglossary.7:98
msgid ""
"BitKeeper/cvsps speak for \"commit\"\\&. Since Git does not store changes, "
"but states, it really does not make sense to use the term \"changesets\" "
"with Git\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:101
msgid "checkout"
msgstr ""

#. type: Plain text
#: gitglossary.7:115
msgid ""
"The action of updating all or part of the working tree with a tree object or "
"blob from the object database, and updating the index and HEAD if the whole "
"working tree has been pointed at a new branch\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:118
msgid "cherry-picking"
msgstr ""

#. type: Plain text
#: gitglossary.7:126
msgid ""
"In SCM jargon, \"cherry pick\" means to choose a subset of changes out of a "
"series of changes (typically commits) and record them as a new series of "
"changes on top of a different codebase\\&. In Git, this is performed by the "
"\"git cherry-pick\" command to extract the change introduced by an existing "
"commit and to record it based on the tip of the current branch as a new "
"commit\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:129
msgid "clean"
msgstr ""

#. type: Plain text
#: gitglossary.7:136
msgid ""
"A working tree is clean, if it corresponds to the revision referenced by the "
"current head\\&. Also see \"dirty\"\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:139
msgid "commit"
msgstr ""

#. type: Plain text
#: gitglossary.7:142
msgid ""
"As a noun: A single point in the Git history; the entire history of a "
"project is represented as a set of interrelated commits\\&. The word "
"\"commit\" is often used by Git in the same places other revision control "
"systems use the words \"revision\" or \"version\"\\&. Also used as a short "
"hand for commit object\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:148
msgid ""
"As a verb: The action of storing a new snapshot of the project\\(cqs state "
"in the Git history, by creating a new commit representing the current state "
"of the index and advancing HEAD to point at the new commit\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:151
msgid "commit object"
msgstr ""

#. type: Plain text
#: gitglossary.7:161
msgid ""
"An object which contains the information about a particular revision, such "
"as parents, committer, author, date and the tree object which corresponds to "
"the top directory of the stored revision\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:164
msgid "commit-ish (also committish)"
msgstr ""

#. type: Plain text
#: gitglossary.7:172
msgid ""
"A commit object or an object that can be recursively dereferenced to a "
"commit object\\&. The following are all commit-ishes: a commit object, a tag "
"object that points to a commit object, a tag object that points to a tag "
"object that points to a commit object, etc\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:175
msgid "core Git"
msgstr ""

#. type: Plain text
#: gitglossary.7:177
msgid ""
"Fundamental data structures and utilities of Git\\&. Exposes only limited "
"source code management tools\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:180
msgid "DAG"
msgstr ""

#. type: Plain text
#: gitglossary.7:187
msgid ""
"Directed acyclic graph\\&. The commit objects form a directed acyclic graph, "
"because they have parents (directed), and the graph of commit objects is "
"acyclic (there is no chain which begins and ends with the same object)\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:190
msgid "dangling object"
msgstr ""

#. type: Plain text
#: gitglossary.7:199
msgid ""
"An unreachable object which is not reachable even from other unreachable "
"objects; a dangling object has no references to it from any reference or "
"object in the repository\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:202
msgid "detached HEAD"
msgstr ""

#. type: Plain text
#: gitglossary.7:211
msgid ""
"Normally the HEAD stores the name of a branch, and commands that operate on "
"the history HEAD represents operate on the history leading to the tip of the "
"branch the HEAD points at\\&. However, Git also allows you to check out an "
"arbitrary commit that isn\\(cqt necessarily the tip of any particular "
"branch\\&. The HEAD in such a state is called \"detached\"\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:219
msgid ""
"Note that commands that operate on the history of the current branch "
"(e\\&.g\\&.  B<git commit> to build a new history on top of it) still work "
"while the HEAD is detached\\&. They update the HEAD to point at the tip of "
"the updated history without affecting any branch\\&. Commands that update or "
"inquire information I<about> the current branch (e\\&.g\\&.  B<git branch "
"--set-upstream-to> that sets what remote-tracking branch the current branch "
"integrates with) obviously do not work, as there is no (real) current branch "
"to ask about in this state\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:222
msgid "directory"
msgstr ""

#. type: Plain text
#: gitglossary.7:224
msgid "The list you get with \"ls\" :-)"
msgstr ""

#. type: Plain text
#: gitglossary.7:227
msgid "dirty"
msgstr ""

#. type: Plain text
#: gitglossary.7:234
msgid ""
"A working tree is said to be \"dirty\" if it contains modifications which "
"have not been committed to the current branch\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:237
msgid "evil merge"
msgstr ""

#. type: Plain text
#: gitglossary.7:242
msgid ""
"An evil merge is a merge that introduces changes that do not appear in any "
"parent\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:245
msgid "fast-forward"
msgstr ""

#. type: Plain text
#: gitglossary.7:258
msgid ""
"A fast-forward is a special type of merge where you have a revision and you "
"are \"merging\" another branch\\*(Aqs changes that happen to be a descendant "
"of what you have\\&. In such a case, you do not make a new merge commit but "
"instead just update your branch to point at the same revision as the branch "
"you are merging\\&. This will happen frequently on a remote-tracking branch "
"of a remote repository\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:261
msgid "fetch"
msgstr ""

#. type: Plain text
#: gitglossary.7:270
msgid ""
"Fetching a branch means to get the branch\\(cqs head ref from a remote "
"repository, to find out which objects are missing from the local object "
"database, and to get them, too\\&. See also B<git-fetch>(1)\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:273
msgid "file system"
msgstr ""

#. type: Plain text
#: gitglossary.7:275
msgid ""
"Linus Torvalds originally designed Git to be a user space file system, "
"i\\&.e\\&. the infrastructure to hold files and directories\\&. That ensured "
"the efficiency and speed of Git\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:278
msgid "Git archive"
msgstr ""

#. type: Plain text
#: gitglossary.7:282
msgid "Synonym for repository (for arch people)\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:285
msgid "gitfile"
msgstr ""

#. type: Plain text
#: gitglossary.7:289
msgid ""
"A plain file B<\\&.git> at the root of a working tree that points at the "
"directory that is the real repository\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:292
msgid "grafts"
msgstr ""

#. type: Plain text
#: gitglossary.7:300
msgid ""
"Grafts enables two otherwise different lines of development to be joined "
"together by recording fake ancestry information for commits\\&. This way you "
"can make Git pretend the set of parents a commit has is different from what "
"was recorded when the commit was created\\&. Configured via the "
"B<\\&.git/info/grafts> file\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:304
msgid ""
"Note that the grafts mechanism is outdated and can lead to problems "
"transferring objects between repositories; see B<git-replace>(1)  for a more "
"flexible and robust system to do the same thing\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:307
msgid "hash"
msgstr ""

#. type: Plain text
#: gitglossary.7:310
msgid "In Git\\(cqs context, synonym for object name\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:313
msgid "head"
msgstr ""

#. type: Plain text
#: gitglossary.7:323
msgid ""
"A named reference to the commit at the tip of a branch\\&. Heads are stored "
"in a file in B<$GIT_DIR/refs/heads/> directory, except when using packed "
"refs\\&. (See B<git-pack-refs>(1)\\&.)"
msgstr ""

#. type: Plain text
#: gitglossary.7:326
msgid "HEAD"
msgstr ""

#. type: Plain text
#: gitglossary.7:334
msgid ""
"The current branch\\&. In more detail: Your working tree is normally derived "
"from the state of the tree referred to by HEAD\\&. HEAD is a reference to "
"one of the heads in your repository, except when using a detached HEAD, in "
"which case it directly references an arbitrary commit\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:337
msgid "head ref"
msgstr ""

#. type: Plain text
#: gitglossary.7:340
msgid "A synonym for head\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:343
msgid "hook"
msgstr ""

#. type: Plain text
#: gitglossary.7:349
msgid ""
"During the normal execution of several Git commands, call-outs are made to "
"optional scripts that allow a developer to add functionality or "
"checking\\&. Typically, the hooks allow for a command to be pre-verified and "
"potentially aborted, and allow for a post-notification after the operation "
"is done\\&. The hook scripts are found in the B<$GIT_DIR/hooks/> directory, "
"and are enabled by simply removing the B<\\&.sample> suffix from the "
"filename\\&. In earlier versions of Git you had to make them executable\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:352
msgid "index"
msgstr ""

#. type: Plain text
#: gitglossary.7:356
msgid ""
"A collection of files with stat information, whose contents are stored as "
"objects\\&. The index is a stored version of your working tree\\&. Truth be "
"told, it can also contain a second, and even a third version of a working "
"tree, which are used when merging\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:359
msgid "index entry"
msgstr ""

#. type: Plain text
#: gitglossary.7:364
msgid ""
"The information regarding a particular file, stored in the index\\&. An "
"index entry can be unmerged, if a merge was started, but not yet finished "
"(i\\&.e\\&. if the index contains multiple versions of that file)\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:367
msgid "master"
msgstr ""

#. type: Plain text
#: gitglossary.7:371
msgid ""
"The default development branch\\&. Whenever you create a Git repository, a "
"branch named \"master\" is created, and becomes the active branch\\&. In "
"most cases, this contains the local development, though that is purely by "
"convention and is not required\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:374
msgid "merge"
msgstr ""

#. type: Plain text
#: gitglossary.7:382
msgid ""
"As a verb: To bring the contents of another branch (possibly from an "
"external repository) into the current branch\\&. In the case where the "
"merged-in branch is from a different repository, this is done by first "
"fetching the remote branch and then merging the result into the current "
"branch\\&. This combination of fetch and merge operations is called a "
"pull\\&. Merging is performed by an automatic process that identifies "
"changes made since the branches diverged, and then applies all those changes "
"together\\&. In cases where changes conflict, manual intervention may be "
"required to complete the merge\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:390
msgid ""
"As a noun: unless it is a fast-forward, a successful merge results in the "
"creation of a new commit representing the result of the merge, and having as "
"parents the tips of the merged branches\\&. This commit is referred to as a "
"\"merge commit\", or sometimes just a \"merge\"\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:393
msgid "object"
msgstr ""

#. type: Plain text
#: gitglossary.7:397
msgid ""
"The unit of storage in Git\\&. It is uniquely identified by the SHA-1 of its "
"contents\\&. Consequently, an object cannot be changed\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:400
msgid "object database"
msgstr ""

#. type: Plain text
#: gitglossary.7:406
msgid ""
"Stores a set of \"objects\", and an individual object is identified by its "
"object name\\&. The objects usually live in B<$GIT_DIR/objects/>\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:409
msgid "object identifier"
msgstr ""

#. type: Plain text
#: gitglossary.7:412
msgid "Synonym for object name\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:415
msgid "object name"
msgstr ""

#. type: Plain text
#: gitglossary.7:419
msgid ""
"The unique identifier of an object\\&. The object name is usually "
"represented by a 40 character hexadecimal string\\&. Also colloquially "
"called SHA-1\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:422
msgid "object type"
msgstr ""

#. type: Plain text
#: gitglossary.7:425
msgid ""
"One of the identifiers \"commit\", \"tree\", \"tag\" or \"blob\" describing "
"the type of an object\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:428
msgid "octopus"
msgstr ""

#. type: Plain text
#: gitglossary.7:433
msgid "To merge more than two branches\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:436
msgid "origin"
msgstr ""

#. type: Plain text
#: gitglossary.7:444
msgid ""
"The default upstream repository\\&. Most projects have at least one upstream "
"project which they track\\&. By default I<origin> is used for that "
"purpose\\&. New upstream updates will be fetched into remote-tracking "
"branches named origin/name-of-upstream-branch, which you can see using B<git "
"branch -r>\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:447
msgid "overlay"
msgstr ""

#. type: Plain text
#: gitglossary.7:457
msgid ""
"Only update and add files to the working directory, but don\\(cqt delete "
"them, similar to how I<cp -R> would update the contents in the destination "
"directory\\&. This is the default mode in a checkout when checking out files "
"from the index or a tree-ish\\&. In contrast, no-overlay mode also deletes "
"tracked files not present in the source, similar to I<rsync --delete>\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:460
msgid "pack"
msgstr ""

#. type: Plain text
#: gitglossary.7:462
msgid ""
"A set of objects which have been compressed into one file (to save space or "
"to transmit them efficiently)\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:465
msgid "pack index"
msgstr ""

#. type: Plain text
#: gitglossary.7:468
msgid ""
"The list of identifiers, and other information, of the objects in a pack, to "
"assist in efficiently accessing the contents of a pack\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:471
msgid "pathspec"
msgstr ""

#. type: Plain text
#: gitglossary.7:473
msgid "Pattern used to limit paths in Git commands\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:475
msgid ""
"Pathspecs are used on the command line of \"git ls-files\", \"git ls-tree\", "
"\"git add\", \"git grep\", \"git diff\", \"git checkout\", and many other "
"commands to limit the scope of operations to some subset of the tree or "
"worktree\\&. See the documentation of each command for whether paths are "
"relative to the current directory or toplevel\\&. The pathspec syntax is as "
"follows:"
msgstr ""

#. type: Plain text
#: gitglossary.7:485
msgid "any path matches itself"
msgstr ""

#. type: Plain text
#: gitglossary.7:496
msgid ""
"the pathspec up to the last slash represents a directory prefix\\&. The "
"scope of that pathspec is limited to that subtree\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:512
msgid ""
"the rest of the pathspec is a pattern for the remainder of the "
"pathname\\&. Paths relative to the directory prefix will be matched against "
"that pattern using fnmatch(3); in particular, I<*> and I<?> I<can> match "
"directory separators\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:515
msgid ""
"For example, Documentation/*\\&.jpg will match all \\&.jpg files in the "
"Documentation subtree, including Documentation/chapter_1/figure_1\\&.jpg\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:522
msgid ""
"A pathspec that begins with a colon B<:> has special meaning\\&. In the "
"short form, the leading colon B<:> is followed by zero or more \"magic "
"signature\" letters (which optionally is terminated by another colon B<:>), "
"and the remainder is the pattern to match against the path\\&. The \"magic "
"signature\" consists of ASCII symbols that are neither alphanumeric, glob, "
"regex special characters nor colon\\&. The optional colon that terminates "
"the \"magic signature\" can be omitted if the pattern begins with a "
"character that does not belong to \"magic signature\" symbol set and is not "
"a colon\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:528
msgid ""
"In the long form, the leading colon B<:> is followed by an open parenthesis "
"B<(>, a comma-separated list of zero or more \"magic words\", and a close "
"parentheses B<)>, and the remainder is the pattern to match against the "
"path\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:530
msgid ""
"A pathspec with only a colon means \"there is no pathspec\"\\&. This form "
"should not be combined with other pathspec\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:532
msgid "top"
msgstr ""

#. type: Plain text
#: gitglossary.7:537
msgid ""
"The magic word B<top> (magic signature: B</>) makes the pattern match from "
"the root of the working tree, even when you are running the command from "
"inside a subdirectory\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:540
msgid "literal"
msgstr ""

#. type: Plain text
#: gitglossary.7:546
msgid ""
"Wildcards in the pattern such as B<*> or B<?> are treated as literal "
"characters\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:549
msgid "icase"
msgstr ""

#. type: Plain text
#: gitglossary.7:551
msgid "Case insensitive match\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:554
msgid "glob"
msgstr ""

#. type: Plain text
#: gitglossary.7:556
msgid ""
"Git treats the pattern as a shell glob suitable for consumption by "
"fnmatch(3) with the FNM_PATHNAME flag: wildcards in the pattern will not "
"match a / in the pathname\\&. For example, \"Documentation/*\\&.html\" "
"matches \"Documentation/git\\&.html\" but not "
"\"Documentation/ppc/ppc\\&.html\" or "
"\"tools/perf/Documentation/perf\\&.html\"\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:558
msgid ""
"Two consecutive asterisks (\"B<**>\") in patterns matched against full "
"pathname may have special meaning:"
msgstr ""

#. type: Plain text
#: gitglossary.7:568
msgid ""
"A leading \"B<**>\" followed by a slash means match in all "
"directories\\&. For example, \"B<**/foo>\" matches file or directory "
"\"B<foo>\" anywhere, the same as pattern \"B<foo>\"\\&. \"B<**/foo/bar>\" "
"matches file or directory \"B<bar>\" anywhere that is directly under "
"directory \"B<foo>\"\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:581
msgid ""
"A trailing \"B</**>\" matches everything inside\\&. For example, "
"\"B<abc/**>\" matches all files inside directory \"abc\", relative to the "
"location of the B<\\&.gitignore> file, with infinite depth\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:592
msgid ""
"A slash followed by two consecutive asterisks then a slash matches zero or "
"more directories\\&. For example, \"B<a/**/b>\" matches \"B<a/b>\", "
"\"B<a/x/b>\", \"B<a/x/y/b>\" and so on\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:603
msgid "Other consecutive asterisks are considered invalid\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:605
msgid "Glob magic is incompatible with literal magic\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:609
msgid "attr"
msgstr ""

#. type: Plain text
#: gitglossary.7:614
msgid ""
"After B<attr:> comes a space separated list of \"attribute requirements\", "
"all of which must be met in order for the path to be considered a match; "
"this is in addition to the usual non-magic pathspec pattern matching\\&. See "
"B<gitattributes>(5)\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:616
msgid "Each of the attribute requirements for the path takes one of these forms:"
msgstr ""

#. type: Plain text
#: gitglossary.7:628
msgid "\"B<ATTR>\" requires that the attribute B<ATTR> be set\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:641
msgid "\"B<-ATTR>\" requires that the attribute B<ATTR> be unset\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:655
msgid ""
"\"B<ATTR=VALUE>\" requires that the attribute B<ATTR> be set to the string "
"B<VALUE>\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:668
msgid "\"B<!ATTR>\" requires that the attribute B<ATTR> be unspecified\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:670
msgid ""
"Note that when matching against a tree object, attributes are still obtained "
"from working tree, not from the given tree object\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:674
msgid "exclude"
msgstr ""

#. type: Plain text
#: gitglossary.7:679
msgid ""
"After a path matches any non-exclude pathspec, it will be run through all "
"exclude pathspecs (magic signature: B<!> or its synonym B<^>)\\&. If it "
"matches, the path is ignored\\&. When there is no non-exclude pathspec, the "
"exclusion is applied to the result set as if invoked without any "
"pathspec\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:683
msgid "parent"
msgstr ""

#. type: Plain text
#: gitglossary.7:687
msgid ""
"A commit object contains a (possibly empty) list of the logical "
"predecessor(s) in the line of development, i\\&.e\\&. its parents\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:690
msgid "pickaxe"
msgstr ""

#. type: Plain text
#: gitglossary.7:699
msgid ""
"The term pickaxe refers to an option to the diffcore routines that help "
"select changes that add or delete a given text string\\&. With the "
"B<--pickaxe-all> option, it can be used to view the full changeset that "
"introduced or removed, say, a particular line of text\\&. See "
"B<git-diff>(1)\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:702
msgid "plumbing"
msgstr ""

#. type: Plain text
#: gitglossary.7:705
msgid "Cute name for core Git\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:708
msgid "porcelain"
msgstr ""

#. type: Plain text
#: gitglossary.7:714
msgid ""
"Cute name for programs and program suites depending on core Git, presenting "
"a high level access to core Git\\&. Porcelains expose more of a SCM "
"interface than the plumbing\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:717
msgid "per-worktree ref"
msgstr ""

#. type: Plain text
#: gitglossary.7:722
msgid ""
"Refs that are per-worktree, rather than global\\&. This is presently only "
"HEAD and any refs that start with B<refs/bisect/>, but might later include "
"other unusual refs\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:725
msgid "pseudoref"
msgstr ""

#. type: Plain text
#: gitglossary.7:738
msgid ""
"Pseudorefs are a class of files under B<$GIT_DIR> which behave like refs for "
"the purposes of rev-parse, but which are treated specially by "
"git\\&. Pseudorefs both have names that are all-caps, and always start with "
"a line consisting of a SHA-1 followed by whitespace\\&. So, HEAD is not a "
"pseudoref, because it is sometimes a symbolic ref\\&. They might optionally "
"contain some additional data\\&.  B<MERGE_HEAD> and B<CHERRY_PICK_HEAD> are "
"examples\\&. Unlike per-worktree refs, these files cannot be symbolic refs, "
"and never have reflogs\\&. They also cannot be updated through the normal "
"ref update machinery\\&. Instead, they are updated by directly writing to "
"the files\\&. However, they can be read as if they were refs, so B<git "
"rev-parse MERGE_HEAD> will work\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:741
msgid "pull"
msgstr ""

#. type: Plain text
#: gitglossary.7:750
msgid ""
"Pulling a branch means to fetch it and merge it\\&. See also "
"B<git-pull>(1)\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:753
msgid "push"
msgstr ""

#. type: Plain text
#: gitglossary.7:765
msgid ""
"Pushing a branch means to get the branch\\(cqs head ref from a remote "
"repository, find out if it is an ancestor to the branch\\(cqs local head "
"ref, and in that case, putting all objects, which are reachable from the "
"local head ref, and which are missing from the remote repository, into the "
"remote object database, and updating the remote head ref\\&. If the remote "
"head is not an ancestor to the local head, the push fails\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:768
msgid "reachable"
msgstr ""

#. type: Plain text
#: gitglossary.7:784
msgid ""
"All of the ancestors of a given commit are said to be \"reachable\" from "
"that commit\\&. More generally, one object is reachable from another if we "
"can reach the one from the other by a chain that follows tags to whatever "
"they tag, commits to their parents or trees, and trees to the trees or blobs "
"that they contain\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:787
msgid "rebase"
msgstr ""

#. type: Plain text
#: gitglossary.7:793
msgid ""
"To reapply a series of changes from a branch to a different base, and reset "
"the head of that branch to the result\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:796
msgid "ref"
msgstr ""

#. type: Plain text
#: gitglossary.7:807
msgid ""
"A name that begins with B<refs/> (e\\&.g\\&.  B<refs/heads/master>) that "
"points to an object name or another ref (the latter is called a symbolic "
"ref)\\&. For convenience, a ref can sometimes be abbreviated when used as an "
"argument to a Git command; see B<gitrevisions>(7)  for details\\&. Refs are "
"stored in the repository\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:811
msgid ""
"The ref namespace is hierarchical\\&. Different subhierarchies are used for "
"different purposes (e\\&.g\\&. the B<refs/heads/> hierarchy is used to "
"represent local branches)\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:815
msgid ""
"There are a few special-purpose refs that do not begin with B<refs/>\\&. The "
"most notable example is B<HEAD>\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:818
msgid "reflog"
msgstr ""

#. type: Plain text
#: gitglossary.7:826
msgid ""
"A reflog shows the local \"history\" of a ref\\&. In other words, it can "
"tell you what the 3rd last revision in I<this> repository was, and what was "
"the current state in I<this> repository, yesterday 9:14pm\\&. See "
"B<git-reflog>(1)  for details\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:829
msgid "refspec"
msgstr ""

#. type: Plain text
#: gitglossary.7:837
msgid ""
"A \"refspec\" is used by fetch and push to describe the mapping between "
"remote ref and local ref\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:840
msgid "remote repository"
msgstr ""

#. type: Plain text
#: gitglossary.7:847
msgid ""
"A repository which is used to track the same project but resides somewhere "
"else\\&. To communicate with remotes, see fetch or push\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:850
msgid "remote-tracking branch"
msgstr ""

#. type: Plain text
#: gitglossary.7:861
msgid ""
"A ref that is used to follow changes from another repository\\&. It "
"typically looks like I<refs/remotes/foo/bar> (indicating that it tracks a "
"branch named I<bar> in a remote named I<foo>), and matches the "
"right-hand-side of a configured fetch refspec\\&. A remote-tracking branch "
"should not contain direct modifications or have local commits made to it\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:864
msgid "repository"
msgstr ""

#. type: Plain text
#: gitglossary.7:874
msgid ""
"A collection of refs together with an object database containing all objects "
"which are reachable from the refs, possibly accompanied by meta data from "
"one or more porcelains\\&. A repository can share an object database with "
"other repositories via alternates mechanism\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:877
msgid "resolve"
msgstr ""

#. type: Plain text
#: gitglossary.7:881
msgid ""
"The action of fixing up manually what a failed automatic merge left "
"behind\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:884
msgid "revision"
msgstr ""

#. type: Plain text
#: gitglossary.7:888
msgid "Synonym for commit (the noun)\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:891
msgid "rewind"
msgstr ""

#. type: Plain text
#: gitglossary.7:896
msgid ""
"To throw away part of the development, i\\&.e\\&. to assign the head to an "
"earlier revision\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:899
msgid "SCM"
msgstr ""

#. type: Plain text
#: gitglossary.7:901
msgid "Source code management (tool)\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:904
msgid "SHA-1"
msgstr ""

#. type: Plain text
#: gitglossary.7:907
msgid ""
"\"Secure Hash Algorithm 1\"; a cryptographic hash function\\&. In the "
"context of Git used as a synonym for object name\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:910
msgid "shallow clone"
msgstr ""

#. type: Plain text
#: gitglossary.7:916
msgid ""
"Mostly a synonym to shallow repository but the phrase makes it more explicit "
"that it was created by running B<git clone --depth=\\&.\\&.\\&.> command\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:919
msgid "shallow repository"
msgstr ""

#. type: Plain text
#: gitglossary.7:932
msgid ""
"A shallow repository has an incomplete history some of whose commits have "
"parents cauterized away (in other words, Git is told to pretend that these "
"commits do not have the parents, even though they are recorded in the commit "
"object)\\&. This is sometimes useful when you are interested only in the "
"recent history of a project even though the real history recorded in the "
"upstream is much larger\\&. A shallow repository is created by giving the "
"B<--depth> option to B<git-clone>(1), and its history can be later deepened "
"with B<git-fetch>(1)\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:935
msgid "stash entry"
msgstr ""

#. type: Plain text
#: gitglossary.7:941
msgid ""
"An object used to temporarily store the contents of a dirty working "
"directory and the index for future reuse\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:944
msgid "submodule"
msgstr ""

#. type: Plain text
#: gitglossary.7:949
msgid ""
"A repository that holds the history of a separate project inside another "
"repository (the latter of which is called superproject)\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:952
msgid "superproject"
msgstr ""

#. type: Plain text
#: gitglossary.7:957
msgid ""
"A repository that references repositories of other projects in its working "
"tree as submodules\\&. The superproject knows about the names of (but does "
"not hold copies of) commit objects of the contained submodules\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:960
msgid "symref"
msgstr ""

#. type: Plain text
#: gitglossary.7:970
msgid ""
"Symbolic reference: instead of containing the SHA-1 id itself, it is of the "
"format I<ref: refs/some/thing> and when referenced, it recursively "
"dereferences to this reference\\&.  I<HEAD> is a prime example of a "
"symref\\&. Symbolic references are manipulated with the "
"B<git-symbolic-ref>(1)  command\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:973
msgid "tag"
msgstr ""

#. type: Plain text
#: gitglossary.7:988
msgid ""
"A ref under B<refs/tags/> namespace that points to an object of an arbitrary "
"type (typically a tag points to either a tag or a commit object)\\&. In "
"contrast to a head, a tag is not updated by the B<commit> command\\&. A Git "
"tag has nothing to do with a Lisp tag (which would be called an object type "
"in Git\\(cqs context)\\&. A tag is most typically used to mark a particular "
"point in the commit ancestry chain\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:991
msgid "tag object"
msgstr ""

#. type: Plain text
#: gitglossary.7:998
msgid ""
"An object containing a ref pointing to another object, which can contain a "
"message just like a commit object\\&. It can also contain a (PGP) signature, "
"in which case it is called a \"signed tag object\"\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:1001
msgid "topic branch"
msgstr ""

#. type: Plain text
#: gitglossary.7:1005
msgid ""
"A regular Git branch that is used by a developer to identify a conceptual "
"line of development\\&. Since branches are very easy and inexpensive, it is "
"often desirable to have several small branches that each contain very well "
"defined concepts or small incremental yet related changes\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:1008
msgid "tree"
msgstr ""

#. type: Plain text
#: gitglossary.7:1015
msgid ""
"Either a working tree, or a tree object together with the dependent blob and "
"tree objects (i\\&.e\\&. a stored representation of a working tree)\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:1018
msgid "tree object"
msgstr ""

#. type: Plain text
#: gitglossary.7:1025
msgid ""
"An object containing a list of file names and modes along with refs to the "
"associated blob and/or tree objects\\&. A tree is equivalent to a "
"directory\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:1028
msgid "tree-ish (also treeish)"
msgstr ""

#. type: Plain text
#: gitglossary.7:1041
msgid ""
"A tree object or an object that can be recursively dereferenced to a tree "
"object\\&. Dereferencing a commit object yields the tree object "
"corresponding to the revision\\*(Aqs top directory\\&. The following are all "
"tree-ishes: a commit-ish, a tree object, a tag object that points to a tree "
"object, a tag object that points to a tag object that points to a tree "
"object, etc\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:1044
msgid "unmerged index"
msgstr ""

#. type: Plain text
#: gitglossary.7:1049
msgid "An index which contains unmerged index entries\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:1052
msgid "unreachable object"
msgstr ""

#. type: Plain text
#: gitglossary.7:1060
msgid ""
"An object which is not reachable from a branch, tag, or any other "
"reference\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:1063
msgid "upstream branch"
msgstr ""

#. type: Plain text
#: gitglossary.7:1073
msgid ""
"The default branch that is merged into the branch in question (or the branch "
"in question is rebased onto)\\&. It is configured via "
"branch\\&.E<lt>nameE<gt>\\&.remote and "
"branch\\&.E<lt>nameE<gt>\\&.merge\\&. If the upstream branch of I<A> is "
"I<origin/B> sometimes we say \"I<A> is tracking I<origin/B>\"\\&."
msgstr ""

#. type: Plain text
#: gitglossary.7:1076
msgid "working tree"
msgstr ""

#. type: Plain text
#: gitglossary.7:1080
msgid ""
"The tree of actual checked out files\\&. The working tree normally contains "
"the contents of the HEAD commit\\(cqs tree, plus any local changes that you "
"have made but not yet committed\\&."
msgstr ""

#. type: SH
#: gitglossary.7:1081
#, no-wrap
msgid "SEE ALSO"
msgstr ""

#. type: Plain text
#: gitglossary.7:1084
msgid ""
"B<gittutorial>(7), B<gittutorial-2>(7), B<gitcvs-migration>(7), "
"B<giteveryday>(7), \\m[blue]B<The Git User\\(cqs "
"Manual>\\m[]\\&\\s-2\\u[1]\\d\\s+2"
msgstr ""

#. type: SH
#: gitglossary.7:1084
#, no-wrap
msgid "GIT"
msgstr ""

#. type: Plain text
#: gitglossary.7:1087
msgid "Part of the B<git>(1) suite"
msgstr ""

#. type: SH
#: gitglossary.7:1087
#, no-wrap
msgid "NOTES"
msgstr ""

#. type: IP
#: gitglossary.7:1088
#, no-wrap
msgid " 1."
msgstr ""

#. type: Plain text
#: gitglossary.7:1090
msgid "The Git User\\(cqs Manual"
msgstr ""

#. type: Plain text
#: gitglossary.7:1092
msgid "\\%file:///usr/share/doc/git/html/user-manual.html"
msgstr ""
