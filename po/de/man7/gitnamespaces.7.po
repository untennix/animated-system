# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-12-07 23:13+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: TH
#: gitnamespaces.7:10
#, no-wrap
msgid "GITNAMESPACES"
msgstr ""

#. type: TH
#: gitnamespaces.7:10
#, no-wrap
msgid "11/29/2021"
msgstr ""

#. type: TH
#: gitnamespaces.7:10
#, no-wrap
msgid "Git 2\\&.34\\&.1"
msgstr ""

#. type: TH
#: gitnamespaces.7:10
#, no-wrap
msgid "Git Manual"
msgstr ""

#.  -----------------------------------------------------------------
#.  * MAIN CONTENT STARTS HERE *
#.  -----------------------------------------------------------------
#. type: SH
#: gitnamespaces.7:30
#, no-wrap
msgid "NAME"
msgstr ""

#. type: Plain text
#: gitnamespaces.7:32
msgid "gitnamespaces - Git namespaces"
msgstr ""

#. type: SH
#: gitnamespaces.7:32
#, no-wrap
msgid "SYNOPSIS"
msgstr ""

#. type: Plain text
#: gitnamespaces.7:37
#, no-wrap
msgid ""
"GIT_NAMESPACE=E<lt>namespaceE<gt> I<git upload-pack>\n"
"GIT_NAMESPACE=E<lt>namespaceE<gt> I<git receive-pack>\n"
msgstr ""

#. type: SH
#: gitnamespaces.7:39
#, no-wrap
msgid "DESCRIPTION"
msgstr ""

#. type: Plain text
#: gitnamespaces.7:42
msgid ""
"Git supports dividing the refs of a single repository into multiple "
"namespaces, each of which has its own branches, tags, and HEAD\\&. Git can "
"expose each namespace as an independent repository to pull from and push to, "
"while sharing the object store, and exposing all the refs to operations such "
"as B<git-gc>(1)\\&."
msgstr ""

#. type: Plain text
#: gitnamespaces.7:44
msgid ""
"Storing multiple repositories as namespaces of a single repository avoids "
"storing duplicate copies of the same objects, such as when storing multiple "
"branches of the same source\\&. The alternates mechanism provides similar "
"support for avoiding duplicates, but alternates do not prevent duplication "
"between new objects added to the repositories without ongoing maintenance, "
"while namespaces do\\&."
msgstr ""

#. type: Plain text
#: gitnamespaces.7:46
msgid ""
"To specify a namespace, set the B<GIT_NAMESPACE> environment variable to the "
"namespace\\&. For each ref namespace, Git stores the corresponding refs in a "
"directory under B<refs/namespaces/>\\&. For example, B<GIT_NAMESPACE=foo> "
"will store refs under B<refs/namespaces/foo/>\\&. You can also specify "
"namespaces via the B<--namespace> option to B<git>(1)\\&."
msgstr ""

#. type: Plain text
#: gitnamespaces.7:48
msgid ""
"Note that namespaces which include a B</> will expand to a hierarchy of "
"namespaces; for example, B<GIT_NAMESPACE=foo/bar> will store refs under "
"B<refs/namespaces/foo/refs/namespaces/bar/>\\&. This makes paths in "
"B<GIT_NAMESPACE> behave hierarchically, so that cloning with "
"B<GIT_NAMESPACE=foo/bar> produces the same result as cloning with "
"B<GIT_NAMESPACE=foo> and cloning from that repo with "
"B<GIT_NAMESPACE=bar>\\&. It also avoids ambiguity with strange namespace "
"paths such as B<foo/refs/heads/>, which could otherwise generate "
"directory/file conflicts within the B<refs> directory\\&."
msgstr ""

#. type: Plain text
#: gitnamespaces.7:50
msgid ""
"B<git-upload-pack>(1) and B<git-receive-pack>(1) rewrite the names of refs "
"as specified by B<GIT_NAMESPACE>\\&. git-upload-pack and git-receive-pack "
"will ignore all references outside the specified namespace\\&."
msgstr ""

#. type: Plain text
#: gitnamespaces.7:52
msgid ""
"The smart HTTP server, B<git-http-backend>(1), will pass GIT_NAMESPACE "
"through to the backend programs; see B<git-http-backend>(1) for sample "
"configuration to expose repository namespaces as repositories\\&."
msgstr ""

#. type: Plain text
#: gitnamespaces.7:54
msgid "For a simple local test, you can use B<git-remote-ext>(1):"
msgstr ""

#. type: Plain text
#: gitnamespaces.7:60
#, no-wrap
msgid "git clone ext::\\*(Aqgit --namespace=foo %s /tmp/prefixed\\&.git\\*(Aq\n"
msgstr ""

#. type: SH
#: gitnamespaces.7:65
#, no-wrap
msgid "SECURITY"
msgstr ""

#. type: Plain text
#: gitnamespaces.7:68
msgid ""
"The fetch and push protocols are not designed to prevent one side from "
"stealing data from the other repository that was not intended to be "
"shared\\&. If you have private data that you need to protect from a "
"malicious peer, your best option is to store it in another "
"repository\\&. This applies to both clients and servers\\&. In particular, "
"namespaces on a server are not effective for read access control; you should "
"only grant read access to a namespace to clients that you would trust with "
"read access to the entire repository\\&."
msgstr ""

#. type: Plain text
#: gitnamespaces.7:70
msgid "The known attack vectors are as follows:"
msgstr ""

#. type: Plain text
#: gitnamespaces.7:80
msgid ""
"The victim sends \"have\" lines advertising the IDs of objects it has that "
"are not explicitly intended to be shared but can be used to optimize the "
"transfer if the peer also has them\\&. The attacker chooses an object ID X "
"to steal and sends a ref to X, but isn\\(cqt required to send the content of "
"X because the victim already has it\\&. Now the victim believes that the "
"attacker has X, and it sends the content of X back to the attacker "
"later\\&. (This attack is most straightforward for a client to perform on a "
"server, by creating a ref to X in the namespace the client has access to and "
"then fetching it\\&. The most likely way for a server to perform it on a "
"client is to \"merge\" X into a public branch and hope that the user does "
"additional work on this branch and pushes it back to the server without "
"noticing the merge\\&.)"
msgstr ""

#. type: Plain text
#: gitnamespaces.7:91
msgid ""
"As in #1, the attacker chooses an object ID X to steal\\&. The victim sends "
"an object Y that the attacker already has, and the attacker falsely claims "
"to have X and not Y, so the victim sends Y as a delta against X\\&. The "
"delta reveals regions of X that are similar to Y to the attacker\\&."
msgstr ""

#. type: SH
#: gitnamespaces.7:92
#, no-wrap
msgid "GIT"
msgstr ""

#. type: Plain text
#: gitnamespaces.7:94
msgid "Part of the B<git>(1) suite"
msgstr ""
