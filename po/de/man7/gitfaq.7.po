# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-12-07 23:13+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: TH
#: gitfaq.7:10
#, no-wrap
msgid "GITFAQ"
msgstr ""

#. type: TH
#: gitfaq.7:10
#, no-wrap
msgid "11/29/2021"
msgstr ""

#. type: TH
#: gitfaq.7:10
#, no-wrap
msgid "Git 2\\&.34\\&.1"
msgstr ""

#. type: TH
#: gitfaq.7:10
#, no-wrap
msgid "Git Manual"
msgstr ""

#.  -----------------------------------------------------------------
#.  * MAIN CONTENT STARTS HERE *
#.  -----------------------------------------------------------------
#. type: SH
#: gitfaq.7:30
#, no-wrap
msgid "NAME"
msgstr ""

#. type: Plain text
#: gitfaq.7:32
msgid "gitfaq - Frequently asked questions about using Git"
msgstr ""

#. type: SH
#: gitfaq.7:32
#, no-wrap
msgid "SYNOPSIS"
msgstr ""

#. type: Plain text
#: gitfaq.7:35
msgid "gitfaq"
msgstr ""

#. type: SH
#: gitfaq.7:35
#, no-wrap
msgid "DESCRIPTION"
msgstr ""

#. type: Plain text
#: gitfaq.7:38
msgid ""
"The examples in this FAQ assume a standard POSIX shell, like B<bash> or "
"B<dash>, and a user, A U Thor, who has the account B<author> on the hosting "
"provider B<git\\&.example\\&.org>\\&."
msgstr ""

#. type: SH
#: gitfaq.7:38
#, no-wrap
msgid "CONFIGURATION"
msgstr ""

#. type: Plain text
#: gitfaq.7:41
msgid "What should I put in B<user\\&.name>?"
msgstr ""

#. type: Plain text
#: gitfaq.7:43
msgid ""
"You should put your personal name, generally a form using a given name and "
"family name\\&. For example, the current maintainer of Git uses \"Junio C "
"Hamano\"\\&. This will be the name portion that is stored in every commit "
"you make\\&."
msgstr ""

#. type: Plain text
#: gitfaq.7:48
msgid ""
"This configuration doesn\\(cqt have any effect on authenticating to remote "
"services; for that, see B<credential\\&.username> in B<git-config>(1)\\&."
msgstr ""

#. type: Plain text
#: gitfaq.7:51
msgid "What does B<http\\&.postBuffer> really do?"
msgstr ""

#. type: Plain text
#: gitfaq.7:53
msgid ""
"This option changes the size of the buffer that Git uses when pushing data "
"to a remote over HTTP or HTTPS\\&. If the data is larger than this size, "
"libcurl, which handles the HTTP support for Git, will use chunked transfer "
"encoding since it isn\\(cqt known ahead of time what the size of the pushed "
"data will be\\&."
msgstr ""

#. type: Plain text
#: gitfaq.7:55
msgid ""
"Leaving this value at the default size is fine unless you know that either "
"the remote server or a proxy in the middle doesn\\(cqt support HTTP/1\\&.1 "
"(which introduced the chunked transfer encoding) or is known to be broken "
"with chunked data\\&. This is often (erroneously) suggested as a solution "
"for generic push problems, but since almost every server and proxy supports "
"at least HTTP/1\\&.1, raising this value usually doesn\\(cqt solve most push "
"problems\\&. A server or proxy that didn\\(cqt correctly support HTTP/1\\&.1 "
"and chunked transfer encoding wouldn\\(cqt be that useful on the Internet "
"today, since it would break lots of traffic\\&."
msgstr ""

#. type: Plain text
#: gitfaq.7:57
msgid ""
"Note that increasing this value will increase the memory used on every "
"relevant push that Git does over HTTP or HTTPS, since the entire buffer is "
"allocated regardless of whether or not it is all used\\&. Thus, it\\(cqs "
"best to leave it at the default unless you are sure you need a different "
"value\\&."
msgstr ""

#. type: Plain text
#: gitfaq.7:60
msgid "How do I configure a different editor?"
msgstr ""

#. type: Plain text
#: gitfaq.7:69
msgid ""
"If you haven\\(cqt specified an editor specifically for Git, it will by "
"default use the editor you\\(cqve configured using the B<VISUAL> or "
"B<EDITOR> environment variables, or if neither is specified, the system "
"default (which is usually B<vi>)\\&. Since some people find B<vi> difficult "
"to use or prefer a different editor, it may be desirable to change the "
"editor used\\&."
msgstr ""

#. type: Plain text
#: gitfaq.7:79
msgid ""
"If you want to configure a general editor for most programs which need one, "
"you can edit your shell configuration (e\\&.g\\&., B<~/\\&.bashrc> or "
"B<~/\\&.zshenv>) to contain a line setting the B<EDITOR> or B<VISUAL> "
"environment variable to an appropriate value\\&. For example, if you prefer "
"the editor B<nano>, then you could write the following:"
msgstr ""

#. type: Plain text
#: gitfaq.7:85
#, no-wrap
msgid "export VISUAL=nano\n"
msgstr ""

#. type: Plain text
#: gitfaq.7:97
msgid ""
"If you want to configure an editor specifically for Git, you can either set "
"the B<core\\&.editor> configuration value or the B<GIT_EDITOR> environment "
"variable\\&. You can see B<git-var>(1)  for details on the order in which "
"these options are consulted\\&."
msgstr ""

#. type: Plain text
#: gitfaq.7:102
msgid ""
"Note that in all cases, the editor value will be passed to the shell, so any "
"arguments containing spaces should be appropriately quoted\\&. Additionally, "
"if your editor normally detaches from the terminal when invoked, you should "
"specify it with an argument that makes it not do that, or else Git will not "
"see any changes\\&. An example of a configuration addressing both of these "
"issues on Windows would be the configuration B<\"C:\\eProgram "
"Files\\eVim\\egvim\\&.exe\" --nofork>, which quotes the filename with spaces "
"and specifies the B<--nofork> option to avoid backgrounding the process\\&."
msgstr ""

#. type: SH
#: gitfaq.7:103
#, no-wrap
msgid "CREDENTIALS"
msgstr ""

#. type: Plain text
#: gitfaq.7:106
msgid "How do I specify my credentials when pushing over HTTP?"
msgstr ""

#. type: Plain text
#: gitfaq.7:116
msgid ""
"The easiest way to do this is to use a credential helper via the "
"B<credential\\&.helper> configuration\\&. Most systems provide a standard "
"choice to integrate with the system credential manager\\&. For example, Git "
"for Windows provides the B<wincred> credential manager, macOS has the "
"B<osxkeychain> credential manager, and Unix systems with a standard desktop "
"environment can use the B<libsecret> credential manager\\&. All of these "
"store credentials in an encrypted store to keep your passwords or tokens "
"secure\\&."
msgstr ""

#. type: Plain text
#: gitfaq.7:122
msgid ""
"In addition, you can use the B<store> credential manager which stores in a "
"file in your home directory, or the B<cache> credential manager, which does "
"not permanently store your credentials, but does prevent you from being "
"prompted for them for a certain period of time\\&."
msgstr ""

#. type: Plain text
#: gitfaq.7:124
msgid ""
"You can also just enter your password when prompted\\&. While it is possible "
"to place the password (which must be percent-encoded) in the URL, this is "
"not particularly secure and can lead to accidental exposure of credentials, "
"so it is not recommended\\&."
msgstr ""

#. type: Plain text
#: gitfaq.7:127
msgid "How do I read a password or token from an environment variable?"
msgstr ""

#. type: Plain text
#: gitfaq.7:131
msgid ""
"The B<credential\\&.helper> configuration option can also take an arbitrary "
"shell command that produces the credential protocol on standard "
"output\\&. This is useful when passing credentials into a container, for "
"example\\&."
msgstr ""

#. type: Plain text
#: gitfaq.7:134
msgid ""
"Such a shell command can be specified by starting the option value with an "
"exclamation point\\&. If your password or token were stored in the "
"B<GIT_TOKEN>, you could run the following command to set your credential "
"helper:"
msgstr ""

#. type: Plain text
#: gitfaq.7:141
#, no-wrap
msgid ""
"$ git config credential\\&.helper \\e\n"
"        \\*(Aq!f() { echo username=author; echo \"password=$GIT_TOKEN\"; "
"};f\\*(Aq\n"
msgstr ""

#. type: Plain text
#: gitfaq.7:149
msgid ""
"How do I change the password or token I\\(cqve saved in my credential "
"manager?"
msgstr ""

#. type: Plain text
#: gitfaq.7:151
msgid ""
"Usually, if the password or token is invalid, Git will erase it and prompt "
"for a new one\\&. However, there are times when this doesn\\(cqt always "
"happen\\&. To change the password or token, you can erase the existing "
"credentials and then Git will prompt for new ones\\&. To erase credentials, "
"use a syntax like the following (substituting your username and the "
"hostname):"
msgstr ""

#. type: Plain text
#: gitfaq.7:157
#, no-wrap
msgid "$ echo url=https://author@git\\&.example\\&.org | git credential reject\n"
msgstr ""

#. type: Plain text
#: gitfaq.7:165
msgid "How do I use multiple accounts with the same hosting provider using HTTP?"
msgstr ""

#. type: Plain text
#: gitfaq.7:179
msgid ""
"Usually the easiest way to distinguish between these accounts is to use the "
"username in the URL\\&. For example, if you have the accounts B<author> and "
"B<committer> on B<git\\&.example\\&.org>, you can use the URLs "
"\\m[blue]B<https://author@git\\&.example\\&.org/org1/project1\\&.git>\\m[] "
"and "
"\\m[blue]B<https://committer@git\\&.example\\&.org/org2/project2\\&.git>\\m[]\\&. "
"This way, when you use a credential helper, it will automatically try to "
"look up the correct credentials for your account\\&. If you already have a "
"remote set up, you can change the URL with something like B<git remote "
"set-url origin https://author@git\\&.example\\&.org/org1/project1\\&.git> "
"(see B<git-remote>(1)  for details)\\&."
msgstr ""

#. type: Plain text
#: gitfaq.7:182
msgid "How do I use multiple accounts with the same hosting provider using SSH?"
msgstr ""

#. type: Plain text
#: gitfaq.7:187
msgid ""
"With most hosting providers that support SSH, a single key pair uniquely "
"identifies a user\\&. Therefore, to use multiple accounts, it\\(cqs "
"necessary to create a key pair for each account\\&. If you\\(cqre using a "
"reasonably modern OpenSSH version, you can create a new key pair with "
"something like B<ssh-keygen -t ed25519 -f ~/\\&.ssh/id_committer>\\&. You "
"can then register the public key (in this case, "
"B<~/\\&.ssh/id_committer\\&.pub>; note the B<\\&.pub>) with the hosting "
"provider\\&."
msgstr ""

#. type: Plain text
#: gitfaq.7:193
msgid ""
"Most hosting providers use a single SSH account for pushing; that is, all "
"users push to the B<git> account (e\\&.g\\&., "
"B<git@git\\&.example\\&.org>)\\&. If that\\(cqs the case for your provider, "
"you can set up multiple aliases in SSH to make it clear which key pair to "
"use\\&. For example, you could write something like the following in "
"B<~/\\&.ssh/config>, substituting the proper private key file:"
msgstr ""

#. type: Plain text
#: gitfaq.7:212
#, no-wrap
msgid ""
"# This is the account for author on git\\&.example\\&.org\\&.\n"
"Host example_author\n"
"        HostName git\\&.example\\&.org\n"
"        User git\n"
"        # This is the key pair registered for author with "
"git\\&.example\\&.org\\&.\n"
"        IdentityFile ~/\\&.ssh/id_author\n"
"        IdentitiesOnly yes\n"
"# This is the account for committer on git\\&.example\\&.org\\&.\n"
"Host example_committer\n"
"        HostName git\\&.example\\&.org\n"
"        User git\n"
"        # This is the key pair registered for committer with "
"git\\&.example\\&.org\\&.\n"
"        IdentityFile ~/\\&.ssh/id_committer\n"
"        IdentitiesOnly yes\n"
msgstr ""

#. type: Plain text
#: gitfaq.7:225
msgid ""
"Then, you can adjust your push URL to use B<git@example_author> or "
"B<git@example_committer> instead of B<git@example\\&.org> (e\\&.g\\&., B<git "
"remote set-url git@example_author:org1/project1\\&.git>)\\&."
msgstr ""

#. type: SH
#: gitfaq.7:226
#, no-wrap
msgid "COMMON ISSUES"
msgstr ""

#. type: Plain text
#: gitfaq.7:229
msgid "I\\(cqve made a mistake in the last commit\\&. How do I change it?"
msgstr ""

#. type: Plain text
#: gitfaq.7:239
msgid ""
"You can make the appropriate change to your working tree, run B<git add "
"E<lt>fileE<gt>> or B<git rm E<lt>fileE<gt>>, as appropriate, to stage it, "
"and then B<git commit --amend>\\&. Your change will be included in the "
"commit, and you\\(cqll be prompted to edit the commit message again; if you "
"wish to use the original message verbatim, you can use the B<--no-edit> "
"option to B<git commit> in addition, or just save and quit when your editor "
"opens\\&."
msgstr ""

#. type: Plain text
#: gitfaq.7:242
msgid ""
"I\\(cqve made a change with a bug and it\\(cqs been included in the main "
"branch\\&. How should I undo it?"
msgstr ""

#. type: Plain text
#: gitfaq.7:245
msgid ""
"The usual way to deal with this is to use B<git revert>\\&. This preserves "
"the history that the original change was made and was a valuable "
"contribution, but also introduces a new commit that undoes those changes "
"because the original had a problem\\&. The commit message of the revert "
"indicates the commit which was reverted and is usually edited to include an "
"explanation as to why the revert was made\\&."
msgstr ""

#. type: Plain text
#: gitfaq.7:248
msgid "How do I ignore changes to a tracked file?"
msgstr ""

#. type: Plain text
#: gitfaq.7:250
msgid ""
"Git doesn\\(cqt provide a way to do this\\&. The reason is that if Git needs "
"to overwrite this file, such as during a checkout, it doesn\\(cqt know "
"whether the changes to the file are precious and should be kept, or whether "
"they are irrelevant and can safely be destroyed\\&. Therefore, it has to "
"take the safe route and always preserve them\\&."
msgstr ""

#. type: Plain text
#: gitfaq.7:253
msgid ""
"It\\(cqs tempting to try to use certain features of B<git update-index>, "
"namely the assume-unchanged and skip-worktree bits, but these don\\(cqt work "
"properly for this purpose and shouldn\\(cqt be used this way\\&."
msgstr ""

#. type: Plain text
#: gitfaq.7:255
msgid ""
"If your goal is to modify a configuration file, it can often be helpful to "
"have a file checked into the repository which is a template or set of "
"defaults which can then be copied alongside and modified as "
"appropriate\\&. This second, modified file is usually ignored to prevent "
"accidentally committing it\\&."
msgstr ""

#. type: Plain text
#: gitfaq.7:258
msgid "I asked Git to ignore various files, yet they are still tracked"
msgstr ""

#. type: Plain text
#: gitfaq.7:269
msgid ""
"A B<gitignore> file ensures that certain file(s) which are not tracked by "
"Git remain untracked\\&. However, sometimes particular file(s) may have been "
"tracked before adding them into the B<\\&.gitignore>, hence they still "
"remain tracked\\&. To untrack and ignore files/patterns, use B<git rm "
"--cached E<lt>file/patternE<gt>> and add a pattern to B<\\&.gitignore> that "
"matches the E<lt>fileE<gt>\\&. See B<gitignore>(5)  for details\\&."
msgstr ""

#. type: Plain text
#: gitfaq.7:272
msgid "How do I know if I want to do a fetch or a pull?"
msgstr ""

#. type: Plain text
#: gitfaq.7:275
msgid ""
"A fetch stores a copy of the latest changes from the remote repository, "
"without modifying the working tree or current branch\\&. You can then at "
"your leisure inspect, merge, rebase on top of, or ignore the upstream "
"changes\\&. A pull consists of a fetch followed immediately by either a "
"merge or rebase\\&. See B<git-pull>(1)\\&."
msgstr ""

#. type: SH
#: gitfaq.7:276
#, no-wrap
msgid "MERGING AND REBASING"
msgstr ""

#. type: Plain text
#: gitfaq.7:279
msgid ""
"What kinds of problems can occur when merging long-lived branches with "
"squash merges?"
msgstr ""

#. type: Plain text
#: gitfaq.7:285
msgid ""
"In general, there are a variety of problems that can occur when using squash "
"merges to merge two branches multiple times\\&. These can include seeing "
"extra commits in B<git log> output, with a GUI, or when using the "
"B<\\&.\\&.\\&.> notation to express a range, as well as the possibility of "
"needing to re-resolve conflicts again and again\\&."
msgstr ""

#. type: Plain text
#: gitfaq.7:288
msgid ""
"When Git does a normal merge between two branches, it considers exactly "
"three points: the two branches and a third commit, called the I<merge base>, "
"which is usually the common ancestor of the commits\\&. The result of the "
"merge is the sum of the changes between the merge base and each "
"head\\&. When you merge two branches with a regular merge commit, this "
"results in a new commit which will end up as a merge base when they\\(cqre "
"merged again, because there is now a new common ancestor\\&. Git doesn\\(cqt "
"have to consider changes that occurred before the merge base, so you "
"don\\(cqt have to re-resolve any conflicts you resolved before\\&."
msgstr ""

#. type: Plain text
#: gitfaq.7:294
msgid ""
"When you perform a squash merge, a merge commit isn\\(cqt created; instead, "
"the changes from one side are applied as a regular commit to the other "
"side\\&. This means that the merge base for these branches won\\(cqt have "
"changed, and so when Git goes to perform its next merge, it considers all of "
"the changes that it considered the last time plus the new changes\\&. That "
"means any conflicts may need to be re-resolved\\&. Similarly, anything using "
"the B<\\&.\\&.\\&.> notation in B<git diff>, B<git log>, or a GUI will "
"result in showing all of the changes since the original merge base\\&."
msgstr ""

#. type: Plain text
#: gitfaq.7:296
msgid ""
"As a consequence, if you want to merge two long-lived branches repeatedly, "
"it\\(cqs best to always use a regular merge commit\\&."
msgstr ""

#. type: Plain text
#: gitfaq.7:299
msgid ""
"If I make a change on two branches but revert it on one, why does the merge "
"of those branches include the change?"
msgstr ""

#. type: Plain text
#: gitfaq.7:304
msgid ""
"By default, when Git does a merge, it uses a strategy called the B<ort> "
"strategy, which does a fancy three-way merge\\&. In such a case, when Git "
"performs the merge, it considers exactly three points: the two heads and a "
"third point, called the I<merge base>, which is usually the common ancestor "
"of those commits\\&. Git does not consider the history or the individual "
"commits that have happened on those branches at all\\&."
msgstr ""

#. type: Plain text
#: gitfaq.7:306
msgid ""
"As a result, if both sides have a change and one side has reverted that "
"change, the result is to include the change\\&. This is because the code has "
"changed on one side and there is no net change on the other, and in this "
"scenario, Git adopts the change\\&."
msgstr ""

#. type: Plain text
#: gitfaq.7:310
msgid ""
"If this is a problem for you, you can do a rebase instead, rebasing the "
"branch with the revert onto the other branch\\&. A rebase in this scenario "
"will revert the change, because a rebase applies each individual commit, "
"including the revert\\&. Note that rebases rewrite history, so you should "
"avoid rebasing published branches unless you\\(cqre sure you\\(cqre "
"comfortable with that\\&. See the NOTES section in B<git-rebase>(1)  for "
"more details\\&."
msgstr ""

#. type: SH
#: gitfaq.7:311
#, no-wrap
msgid "HOOKS"
msgstr ""

#. type: Plain text
#: gitfaq.7:314
msgid "How do I use hooks to prevent users from making certain changes?"
msgstr ""

#. type: Plain text
#: gitfaq.7:318
msgid ""
"The only safe place to make these changes is on the remote repository "
"(i\\&.e\\&., the Git server), usually in the B<pre-receive> hook or in a "
"continuous integration (CI) system\\&. These are the locations in which "
"policy can be enforced effectively\\&."
msgstr ""

#. type: Plain text
#: gitfaq.7:326
msgid ""
"It\\(cqs common to try to use B<pre-commit> hooks (or, for commit messages, "
"B<commit-msg> hooks) to check these things, which is great if you\\(cqre "
"working as a solo developer and want the tooling to help you\\&. However, "
"using hooks on a developer machine is not effective as a policy control "
"because a user can bypass these hooks with B<--no-verify> without being "
"noticed (among various other ways)\\&. Git assumes that the user is in "
"control of their local repositories and doesn\\(cqt try to prevent this or "
"tattle on the user\\&."
msgstr ""

#. type: Plain text
#: gitfaq.7:330
msgid ""
"In addition, some advanced users find B<pre-commit> hooks to be an "
"impediment to workflows that use temporary commits to stage work in progress "
"or that create fixup commits, so it\\(cqs better to push these kinds of "
"checks to the server anyway\\&."
msgstr ""

#. type: SH
#: gitfaq.7:331
#, no-wrap
msgid "CROSS-PLATFORM ISSUES"
msgstr ""

#. type: Plain text
#: gitfaq.7:334
msgid "I\\(cqm on Windows and my text files are detected as binary\\&."
msgstr ""

#. type: Plain text
#: gitfaq.7:338
msgid ""
"Git works best when you store text files as UTF-8\\&. Many programs on "
"Windows support UTF-8, but some do not and only use the little-endian UTF-16 "
"format, which Git detects as binary\\&. If you can\\(cqt use UTF-8 with your "
"programs, you can specify a working tree encoding that indicates which "
"encoding your files should be checked out with, while still storing these "
"files as UTF-8 in the repository\\&. This allows tools like B<git-diff>(1)  "
"to work as expected, while still allowing your tools to work\\&."
msgstr ""

#. type: Plain text
#: gitfaq.7:344
msgid ""
"To do so, you can specify a B<gitattributes>(5)  pattern with the "
"B<working-tree-encoding> attribute\\&. For example, the following pattern "
"sets all C files to use UTF-16LE-BOM, which is a common encoding on Windows:"
msgstr ""

#. type: Plain text
#: gitfaq.7:350
#, no-wrap
msgid "*\\&.c     working-tree-encoding=UTF-16LE-BOM\n"
msgstr ""

#. type: Plain text
#: gitfaq.7:361
msgid ""
"You will need to run B<git add --renormalize> to have this take "
"effect\\&. Note that if you are making these changes on a project that is "
"used across platforms, you\\(cqll probably want to make it in a per-user "
"configuration file or in the one in B<$GIT_DIR/info/attributes>, since "
"making it in a B<\\&.gitattributes> file in the repository will apply to all "
"users of the repository\\&."
msgstr ""

#. type: Plain text
#: gitfaq.7:365
msgid ""
"See the following entry for information about normalizing line endings as "
"well, and see B<gitattributes>(5)  for more information about attribute "
"files\\&."
msgstr ""

#. type: Plain text
#: gitfaq.7:368
msgid ""
"I\\(cqm on Windows and git diff shows my files as having a B<^M> at the "
"end\\&."
msgstr ""

#. type: Plain text
#: gitfaq.7:370
msgid ""
"By default, Git expects files to be stored with Unix line endings\\&. As "
"such, the carriage return (B<^M>) that is part of a Windows line ending is "
"shown because it is considered to be trailing whitespace\\&. Git defaults to "
"showing trailing whitespace only on new lines, not existing ones\\&."
msgstr ""

#. type: Plain text
#: gitfaq.7:376
msgid ""
"You can store the files in the repository with Unix line endings and convert "
"them automatically to your platform\\(cqs line endings\\&. To do that, set "
"the configuration option B<core\\&.eol> to B<native> and see the following "
"entry for information about how to configure files as text or binary\\&."
msgstr ""

#. type: Plain text
#: gitfaq.7:380
msgid ""
"You can also control this behavior with the B<core\\&.whitespace> setting if "
"you don\\(cqt wish to remove the carriage returns from your line endings\\&."
msgstr ""

#. type: Plain text
#: gitfaq.7:383
msgid "Why do I have a file that\\(cqs always modified?"
msgstr ""

#. type: Plain text
#: gitfaq.7:385
msgid ""
"Internally, Git always stores file names as sequences of bytes and "
"doesn\\(cqt perform any encoding or case folding\\&. However, Windows and "
"macOS by default both perform case folding on file names\\&. As a result, "
"it\\(cqs possible to end up with multiple files or directories whose names "
"differ only in case\\&. Git can handle this just fine, but the file system "
"can store only one of these files, so when Git reads the other file to see "
"its contents, it looks modified\\&."
msgstr ""

#. type: Plain text
#: gitfaq.7:390
msgid ""
"It\\(cqs best to remove one of the files such that you only have one "
"file\\&. You can do this with commands like the following (assuming two "
"files B<AFile\\&.txt> and B<afile\\&.txt>) on an otherwise clean working "
"tree:"
msgstr ""

#. type: Plain text
#: gitfaq.7:398
#, no-wrap
msgid ""
"$ git rm --cached AFile\\&.txt\n"
"$ git commit -m \\*(AqRemove files conflicting in case\\*(Aq\n"
"$ git checkout \\&.\n"
msgstr ""

#. type: Plain text
#: gitfaq.7:406
msgid ""
"This avoids touching the disk, but removes the additional file\\&. Your "
"project may prefer to adopt a naming convention, such as all-lowercase "
"names, to avoid this problem from occurring again; such a convention can be "
"checked using a B<pre-receive> hook or as part of a continuous integration "
"(CI) system\\&."
msgstr ""

#. type: Plain text
#: gitfaq.7:408
msgid ""
"It is also possible for perpetually modified files to occur on any platform "
"if a smudge or clean filter is in use on your system but a file was "
"previously committed without running the smudge or clean filter\\&. To fix "
"this, run the following on an otherwise clean working tree:"
msgstr ""

#. type: Plain text
#: gitfaq.7:414
#, no-wrap
msgid "$ git add --renormalize \\&.\n"
msgstr ""

#. type: Plain text
#: gitfaq.7:422
msgid "What\\(cqs the recommended way to store files in Git?"
msgstr ""

#. type: Plain text
#: gitfaq.7:427
msgid ""
"While Git can store and handle any file of any type, there are some settings "
"that work better than others\\&. In general, we recommend that text files be "
"stored in UTF-8 without a byte-order mark (BOM) with LF (Unix-style) "
"endings\\&. We also recommend the use of UTF-8 (again, without BOM) in "
"commit messages\\&. These are the settings that work best across platforms "
"and with tools such as B<git diff> and B<git merge>\\&."
msgstr ""

#. type: Plain text
#: gitfaq.7:429
msgid ""
"Additionally, if you have a choice between storage formats that are text "
"based or non-text based, we recommend storing files in the text format and, "
"if necessary, transforming them into the other format\\&. For example, a "
"text-based SQL dump with one record per line will work much better for "
"diffing and merging than an actual database file\\&. Similarly, text-based "
"formats such as Markdown and AsciiDoc will work better than binary formats "
"such as Microsoft Word and PDF\\&."
msgstr ""

#. type: Plain text
#: gitfaq.7:431
msgid ""
"Similarly, storing binary dependencies (e\\&.g\\&., shared libraries or JAR "
"files) or build products in the repository is generally not "
"recommended\\&. Dependencies and build products are best stored on an "
"artifact or package server with only references, URLs, and hashes stored in "
"the repository\\&."
msgstr ""

#. type: Plain text
#: gitfaq.7:436
msgid ""
"We also recommend setting a B<gitattributes>(5)  file to explicitly mark "
"which files are text and which are binary\\&. If you want Git to guess, you "
"can set the attribute B<text=auto>\\&. For example, the following might be "
"appropriate in some projects:"
msgstr ""

#. type: Plain text
#: gitfaq.7:447
#, no-wrap
msgid ""
"# By default, guess\\&.\n"
"*       text=auto\n"
"# Mark all C files as text\\&.\n"
"*\\&.c     text\n"
"# Mark all JPEG files as binary\\&.\n"
"*\\&.jpg   binary\n"
msgstr ""

#. type: Plain text
#: gitfaq.7:453
msgid ""
"These settings help tools pick the right format for output such as patches "
"and result in files being checked out in the appropriate line ending for the "
"platform\\&."
msgstr ""

#. type: SH
#: gitfaq.7:454
#, no-wrap
msgid "GIT"
msgstr ""

#. type: Plain text
#: gitfaq.7:456
msgid "Part of the B<git>(1) suite"
msgstr ""
